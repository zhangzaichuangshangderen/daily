

1. spring中常用的注解
创建bean
@Component -> @Controller @Service @Repository
@Bean

bean的作用范围
@Scope("singleton") 单例，差不多和容器一样的生命周期
@Scope("prototype")	多实例，每次从容器中获取bean的时候都创建一个新的实例

自动装配
@Autoload
@Qualifier 
Q：@Autoload和@Resource的区别

配置类
@Configuration
@EnableAutoConfiguration

启动
@SpringBootApplication
@EnableAutoConfiguration
@ComponentScan




2. 什么是依赖注入，依赖注入有什么好处，有哪几种方式
依赖注入是实现控制反转的实现方式。
当代码中需要依赖其他对象的时候，有两种方式
1. 直接在代码中new一个对象出来
2. 由IoC容器来构造对象，再将构造好的对象注入到我们的对象中。
第二种方式就是依赖注入

依赖注入的好处就是可以减少代码之间的耦合，可以轻松的切换和替换依赖
举个例子：推荐列表，推荐列表通常由 读取推荐池-》过滤-》通过推荐策略排序-〉组装数据几个步骤完成
其中最常迭代的就是推荐策略
如果使用第一种方式，推荐代码将和推荐策略耦合在一起，且每一次调整策略时，都需要更改推荐的代码
如果使用依赖注入，我们可以将推荐策略注入到推荐服务中去，更改推荐策略的时候，则完全不需要更改推荐服务的代码
减少了代码之间的耦合，减少了迭代时候的工作量

依赖注入的方式
1. 通过构造器注入（@Autowired + 构造方法，推荐，但是我也没用过）
2. 通过setter方法注入（@Autowired + set方法，没用过）
3. 通过字段注入（@Autowired + 字段属性，最常用）

3.解释下Spring中的“三级缓存”
spring的三级缓存主要是为了解决循环依赖的问题
第一级缓存：
singletonObjects：
	作用： 存储已经完全初始化并准备就绪的单例Bean实例。
	时机： 当Bean的初始化完成后，会被放入这个缓存中。
第二级缓存：
earlySingletonObjects：
	作用： 存储早期（early）创建但尚未完成初始化的单例Bean实例
	时机： 当Bean的实例被创建但还未完成初始化时，会被放入这个缓存中。
第三级缓存：（主要为了解决Aop下的循环引用）
singletonFactories：
	作用： 存储用于创建单例Bean实例的工厂方法（不一定会被用到）
	时机： 当Bean的实例被创建但还未完成初始化时？？？

bean的创建粗粗的划分大概有3个阶段，实例化 -》 依赖注入 -〉初始化
假如BeanA，不存在任何的循环引，那它实例化、依赖注入、初始化之后，就会被放入singletonObjects中，它是一个完整的Bean。
假如BeanA和BeanB之间存在循环引用，那它们的创建过程是这样的：
1. 实例化A，对A进行属性注入，发现A依赖B，将A放singletonFactories中
2. 实例化B，对B进行属性填充，通过singletonFactories拿到A的工厂方法，进行初始化，完成，存入到singletonObjects
3. 返回A，完成属性注入，开始执行初始化，如果配置了AOP，那



